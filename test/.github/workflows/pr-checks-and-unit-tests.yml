name: Run Deployment Checks and Apex Tests in Scratch Org

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Salesforce CLI
        run: |
          mkdir sfdx
          wget -qO- https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz | tar xJ -C sfdx --strip-components 1
          echo $(realpath sfdx/bin) >> $GITHUB_PATH

      - name: Authenticate Dev Hub
        run: |
          echo ${{ secrets.DEVHUB_AUTH_URL}} > ./DEVHUB_AUTH_URL.txt
          sf org login sfdx-url --sfdx-url-file  ./DEVHUB_AUTH_URL.txt -d

      - name: Create scratch org
        run: |
          sf org create scratch --definition-file "./config/carehub-enterprise-project-scratch-def.json" -a "${{ github.ref_name }}" --set-default -c -w 30 --duration-days 1

      - name: Deploy DataHub source to org
        run: |
          sf project deploy start --source-dir "./source/datahub"

      - name: Deploy CareHub Pre-Deployment source to org
        if: success()
        run: |
          sf project deploy start --source-dir "./source-carehub-pre-deployment"

      - name: Deploy CareHub source to org
        if: success()
        run: |
          sf project deploy start --source-dir "./source/carehub"

      - name: Assign Permission Sets
        if: success()
        run: |
          sf org assign permset --name SyntilioDataHubAdmin --name SyntilioCareHubAdmin --name SyntilioBusinessAccountRecordType --name SyntilioCareCircleContactRecordType --name SyntilioClientContactRecordType --name SyntilioDefaultCaseRecordType --name SyntilioEventTaskRecordType --name SyntilioBusinessContactRecordType --name SyntilioPartnerContactRecordType --name SyntilioSharedDeviceContactRecordType --name SyntilioCareOrganisationAccountRecordType --target-org "${{ github.ref_name }}"

      - name: Deploy Test Suites
        if: success()
        run: |
          sf project deploy start --source-dir ./unpackagedsource/datahub-unpackaged
          sf project deploy start --source-dir ./unpackagedsource/carehub-unpackaged/main/default/testSuites/CareHubTestClasses.testSuite-meta.xml

      #- name: Deploy CareHub Unpackaged and After Deployment
      #  if: success()
      #  run: |
      #    sf project deploy start --source-dir ./unpackagedsource/carehub-unpackaged
      #    sf project deploy start --source-dir ./unpackagedsource/carehub-after-deployment

      - name: Run Data Hub Unit Tests
        if: success()
        run: |
          sf apex run test --test-level RunSpecifiedTests --suite-names DataHubTestClasses --code-coverage --output-dir ./coverage/testresults --wait 30 --result-format json
          test_id=$(< ./coverage/testresults/test-run-id.txt)
          failing=$(jq '.summary.failing' "./coverage/testresults/test-result-${test_id}.json")
          if (( $(echo "$failing > 0" | bc -l) )); then
              echo "$failing tests are failing"
              rm -rf ./coverage/testresults
              exit 1
          fi
          test_coverage=$(jq '.summary.testRunCoverage' "./coverage/testresults/test-result-${test_id}.json")
          test_coverage_number=$(echo "$test_coverage" | sed 's/[^0-9]*//g')
          if (( $(echo "$test_coverage_number < 75" | bc -l) )); then
              echo "Error: Test coverage is less than 75%"
              echo $test_coverage_number%
              rm -rf ./coverage/testresults
              exit 1
          else
              echo "Test coverage is acceptable."
          fi
          rm -rf ./coverage/testresults
      - name: Run Care Hub Unit Tests
        if: success()
        run: |
          sf apex run test --test-level RunSpecifiedTests --suite-names CareHubTestClasses --code-coverage --output-dir ./coverage/testresults --wait 30 --result-format json
          test_id=$(< ./coverage/testresults/test-run-id.txt)
          failing=$(jq '.summary.failing' "./coverage/testresults/test-result-${test_id}.json")
          if (( $(echo "$failing > 0" | bc -l) )); then
              echo "$failing tests are failing"
              rm -rf ./coverage/testresults
              exit 1
          fi
          test_coverage=$(jq '.summary.testRunCoverage' "./coverage/testresults/test-result-${test_id}.json")
          test_coverage_number=$(echo "$test_coverage" | sed 's/[^0-9]*//g')
          if (( $(echo "$test_coverage_number < 75" | bc -l) )); then
              echo "Error: Test coverage is less than 75%"
              echo $test_coverage_number%
              rm -rf ./coverage/testresults
              exit 1
          else
              echo "Test coverage is acceptable."
          fi
          rm -rf ./coverage/testresults

      - name: Insert Demo Data
        if: success()
        run: |
          ./InsertCareHubDemoData.sh

      - name: Delete scratch org
        if: always()
        run: |
          sf org delete scratch --no-prompt
