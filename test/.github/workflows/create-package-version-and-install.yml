name: Create Package Versions and Install on new Scratch Org

permissions:
    id-token: write
    contents: read
    actions: read

on:
    push:
        branches:
            - test
            - "release/*"
            - "hotfix/*"

jobs:
    create-install-package-version:
        runs-on: ubuntu-latest
        env:
            carehub_version_id: ""
            datahub_version_id: ""
            username: ""
            carehub_no_version: "false"
            datahub_no_version: "false"
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Salesforce CLI
              run: |
                  mkdir sfdx
                  wget -qO- https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz | tar xJ -C sfdx --strip-components 1
                  echo $(realpath sfdx/bin) >> $GITHUB_PATH

            - name: Authenticate Dev Hub
              run: |
                  echo ${{ secrets.DEVHUB_AUTH_URL}} > ./DEVHUB_AUTH_URL.txt
                  sf org login sfdx-url --sfdx-url-file  ./DEVHUB_AUTH_URL.txt -d

            - name: Create scratch org
              run: |
                  sf org create scratch --definition-file "./config/carehub-enterprise-project-scratch-def.json" -a "${{ github.ref_name }}-dry-run" --set-default -c -w 30 --duration-days 7


            - name: Check for changed files
              id: filter
              uses: dorny/paths-filter@v3
              with:
                base: ${{ github.ref_name }}
                filters: |
                  datahub_changed:
                    - "source/datahub/**"
                  carehub_changed:
                    - "source/carehub/**"

            - name: Create DataHub Package Version
              if: steps.filter.outputs.datahub_changed == 'true'
              run: |
                echo "Create DataHub Package Version"
                sf package version create --package "${{ vars.DATAHUB_TEST_PACKAGE_ID }}" --version-name "ver 0.100.0" --version-number "0.100.0.NEXT" --path=source/datahub --installation-key-bypass --code-coverage --definition-file "./config/datahub-project-scratch-def.json" --wait 100 --skip-ancestor-check --json | tee sf_datahub_output.json
                if [ $? -ne 0 ]; then
                  echo "sf command failed"
                  exit 1
                fi
                datahub_version_id=$(jq -r '.result.SubscriberPackageVersionId' sf_datahub_output.json)
                if [ -z "$datahub_version_id" ]; then
                  echo "Failed to extract datahub_version_id"
                  exit 1
                fi
                echo "datahub_version_id=$datahub_version_id" >> $GITHUB_ENV
                echo "$datahub_version_id"

            - name: Get DataHub Package Version
              if: steps.filter.outputs.datahub_changed == 'false'
              run: |
                echo "datahub_version_id=$(sf package version list -p "${{vars.DATAHUB_TEST_PACKAGE_ID}}" --json | jq '[.result[] | select(.Name == "ver 0.100.0")] | sort_by(.CreatedDate) | .[-1].SubscriberPackageVersionId' -r)" >> $GITHUB_ENV
                echo "${datahub_version_id}"

            - name: Install DataHub Package Version
              run: |
                  echo "Install DataHub Package Version"
                  chmod +x ./InstallPackage.sh
                  set -e
                  ./InstallPackage.sh -i "${datahub_version_id}" 2>&1 | tee output.log
                  cat output.log
                  if grep -q 'no subscriber package version record found' output.log; then
                    echo "datahub_no_version=true" >> $GITHUB_ENV
                    exit 1
                  fi
  
            - name: Create CareHub Package Version
              if: steps.filter.outputs.carehub_changed == 'true'
              run: |
                  echo "Create CareHub Package Version"
                  sf package version create --package "${{ vars.CAREHUB_TEST_PACKAGE_ID }}" --version-name "ver 0.100.0" --version-number "0.100.0.NEXT" --path=source/carehub --installation-key-bypass --code-coverage --definition-file "./config/carehub-enterprise-project-scratch-def.json" --wait 100 --skip-ancestor-check --json | tee sf_output.json
                  if [ $? -ne 0 ]; then
                    echo "sf command failed"
                    exit 1
                  fi
                  carehub_version_id=$(jq -r '.result.SubscriberPackageVersionId' sf_output.json)
                  if [ -z "$carehub_version_id" ]; then
                    echo "Failed to extract carehub_version_id"
                    exit 1
                  fi
                  echo "carehub_version_id=$carehub_version_id" >> $GITHUB_ENV
                  echo "$carehub_version_id"

            - name: Get Carehub Package Version
              if: steps.filter.outputs.carehub_changed == 'false'
              run: |
                echo "carehub_version_id=$(sf package version list -p "${{vars.CAREHUB_TEST_PACKAGE_ID}}" --json | jq '[.result[] | select(.Name == "ver 0.100.0")] | sort_by(.CreatedDate) | .[-1].SubscriberPackageVersionId' -r)" >> $GITHUB_ENV
                echo "${carehub_version_id}"
              
            - name: Install CareHub Package Version
              run: |
                  echo "CareHub Pre-installation"
                  sf project deploy start --source-dir source/carehub/main/default/standardValueSets -c
                  echo "Install CareHub Package Version"
                  chmod +x ./InstallPackage.sh
                  set -e
                  ./InstallPackage.sh -i "${carehub_version_id}" 2>&1 | tee output.log
                  cat output.log
                  if grep -q 'no subscriber package version record found' output.log; then
                    echo "carehub_no_version=true" >> $GITHUB_ENV
                    exit 1
                  fi

            - name: Create Test User
              id: create_user
              if: success()
              run: |
                  sf_output=$(sf org display --json)
                  echo "${sf_output}"
                  instance_url=$(echo "$sf_output" | tr -d '\r\n' | jq -r '.result.instanceUrl')
                  echo "${instance_url}"
                  trimmed_instance_url="${instance_url#https://}"
                  echo "${trimmed_instance_url}"
                  test_username="it-tekunda@${trimmed_instance_url}"
                  echo "${test_username}"
                  sf org create user profileName="System Administrator" username=${test_username} email=it@tekunda.com generatepassword=true
                  echo "username=${test_username}" >> $GITHUB_ENV
                  password_output=$(sf org generate password --on-behalf-of "${test_username}" --json)
                  echo "${password_output}"

            - name: Assign Permission Sets
              if: success()
              run: |
                  sf org assign permset --name SyntilioDataHubAdmin --name SyntilioCareHubAdmin --name SyntilioBusinessAccountRecordType --name SyntilioCareCircleContactRecordType --name SyntilioClientContactRecordType --name SyntilioDefaultCaseRecordType --name SyntilioEventTaskRecordType --name SyntilioBusinessContactRecordType --name SyntilioPartnerContactRecordType --name SyntilioSharedDeviceContactRecordType --name SyntilioCareOrganisationAccountRecordType --on-behalf-of "${username}"

            - name: Post-installation
              if: success()
              run: |
                  sf project deploy start --source-dir source/datahub/main/default/profiles/Admin.profile-meta.xml source/carehub/main/default/profiles/Admin.profile-meta.xml -c --target-org "${username}"
                  sf project deploy start --source-dir unpackagedsource/datahub-unpackaged unpackagedsource/carehub-unpackaged -c --target-org "${username}"
                  sf project deploy start --source-dir unpackagedsource/carehub-after-deployment -c --target-org "${username}"

            - name: Insert Demo Data
              if: success()
              run: |
                  ./InsertCareHubDemoData.sh

            - name: Display User
              if: success()
              run: |
                  sf_output=$(sf org user display -o "${username}" --json)
                  access_token=$(echo "$sf_output" | tr -d '\r\n' | jq -r '.result.accessToken')
                  instance_url=$(echo "$sf_output" | tr -d '\r\n' | jq -r '.result.instanceUrl')
                  echo "${instance_url}/secur/frontdoor.jsp?sid=${access_token}"

            - name: Delete Scratch Org if anything failed
              if: failure() && env.datahub_no_version != 'true' && env.carehub_no_version != 'true'
              run: |
                  sf org delete scratch --no-prompt
